[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Brandon Scott",
    "section": "",
    "text": "I love learning and teaching so this blog is my motivation to learn new topics and learn how to best convey the messages I received. I hope to demonstrate in this blog an analytical way to approach problems. I like using a tool-box method in my posts, approaching a problem and demonstrating how various tools can be used to solve it. I hope you enjoy this blog as much as I enjoy writing it!"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Brandon Scott",
    "section": "Education",
    "text": "Education\nTexas A&M University M.S. in Statistics | January 2023 - May 2024\nUtah Valley University M.S. in Computer Science | September 2021 - April 2022 (transferred)\nBrigham Young University B.S. in Actuarial Science | September 2017 - April 2021"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Brandon Scott",
    "section": "Experience",
    "text": "Experience\nUber | Data Analyst | October 2022 - July 2023 AdvancedMD | Senior Business Analyst | July 2021 - October 2022"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Bayesian Bandit",
    "section": "",
    "text": "An Analysis of Heart Disease Data\n\n\n\nanalysis\n\n\nbayesian\n\n\npython\n\n\nclassification\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nForecasting Enrollment Size by Class at TAMU\n\n\n\nanalysis\n\n\nbayesian\n\n\npython\n\n\nforecasting\n\n\n\n\n\n\n\nBrandon Scott\n\n\nMay 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAn Analysis of TA-MU Hotel Booking Data\n\n\n\nanalysis\n\n\nbayesian\n\n\npython\n\n\nclassification\n\n\n\n\n\n\n\nBrandon Scott\n\n\nApr 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome to my blog!\n\n\n\nwelcome\n\n\nbayesian\n\n\n\n\n\n\n\nBrandon Scott\n\n\nMar 6, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/heart-disease/heart_disease_analysis.html",
    "href": "posts/heart-disease/heart_disease_analysis.html",
    "title": "An Analysis of Heart Disease Data",
    "section": "",
    "text": "Abstract\nUsing data collected from hospitals in India, we demonstrate the usefulness of logistic regression in classifying patients with cardiovascular disease based on features collected by the hospital. We first present the classic approach to logistic regression (frequentist appraoch) followed by a demonstration of a bayesian approach to binary classification data. Our analysis shows that the given features and proposed inference approach prove viable and accurate methods in detecting cardiovascular disease in the sampled patients.\nData can be found here\n\n\nIntroduction\nTests are widely used in hospitals around the world to increase the effectiveness of preventitve care. Behind these tests are statistical methods that aid doctors and other healthcare professionals in properly administering care by correctly identifying health problems. In this analysis, we analyze a dataset collected from hospitals in India that were looking for ways to identify cardiovascular diseases in their patients. The goal is to provide the hospitals with 2 things: an accurate model that predicts the presence of cardiovascular disease, and a model that helps doctors know what symptoms to watch out for when helping patients, further alerting them to either receive a test for possible cardiovascular disease or dismiss those concerns.\nBelow is the first 5 rows of the dataset that we will be analyzing.\n\n\n\n\n\n\n\n\n\npatientid\nage\ngender\nchestpain\nrestingBP\nserumcholestrol\nfastingbloodsugar\nrestingrelectro\nmaxheartrate\nexerciseangia\noldpeak\nslope\nnoofmajorvessels\ntarget\n\n\n\n\n0\n103368\n53\n1\n2\n171\n0\n0\n1\n147\n0\n5.3\n3\n3\n1\n\n\n1\n119250\n40\n1\n0\n94\n229\n0\n1\n115\n0\n3.7\n1\n1\n0\n\n\n2\n119372\n49\n1\n2\n133\n142\n0\n0\n202\n1\n5.0\n1\n0\n0\n\n\n3\n132514\n43\n1\n0\n138\n295\n1\n1\n153\n0\n3.2\n2\n2\n1\n\n\n4\n146211\n31\n1\n1\n199\n0\n0\n2\n136\n0\n5.3\n3\n2\n1\n\n\n\n\n\n\n\nOf the 14 columns listed above, 1 is our target column (1 for disease and 0 for no disease), 12 features that we will use to gather inference on the target, and 1 column for patientids (unique key). Gender is encoded 1 for male and 0 for female. To ensure our analysis goes smoothly, we should validate that there are no null values. If there are any, we need to construct a strategy for conserving as much information as possible. Output for the number of null values for each column is found below.\n\n\npatientid            0\nage                  0\ngender               0\nchestpain            0\nrestingBP            0\nserumcholestrol      0\nfastingbloodsugar    0\nrestingrelectro      0\nmaxheartrate         0\nexerciseangia        0\noldpeak              0\nslope                0\nnoofmajorvessels     0\ntarget               0\ndtype: int64\n\n\nThe output shows that there are no null values for any of the columns in our dataset, so we can move onto the next step of data prep which is to verify the datatypes of each column. Essentially, we are verifying that all columns have data values that are to be expected (i.e. integers types for numeric columns). Output for this test is shown below.\n\n\npatientid              int64\nage                    int64\ngender                 int64\nchestpain              int64\nrestingBP              int64\nserumcholestrol        int64\nfastingbloodsugar      int64\nrestingrelectro        int64\nmaxheartrate           int64\nexerciseangia          int64\noldpeak              float64\nslope                  int64\nnoofmajorvessels       int64\ntarget                 int64\ndtype: object\n\n\nThere doesn’t appear to be any unexpected datatypes in the dataset, so we can verify this step of data prep. More data prep can always be explored to ensure viable data for data analysis purposes, but for now we shall conclude these 2 steps are sufficient and proceed to our analysis of the data.\n\n\nExploratory Data Analysis\nTo begin our analysis, we will perform exploratory data analysis (EDA) to gather more information about how to best model our data. Below is a descriptive statistics table for our columns.\n\n\n\n\n\n\n\n\n\npatientid\nage\ngender\nchestpain\nrestingBP\nserumcholestrol\nfastingbloodsugar\nrestingrelectro\nmaxheartrate\nexerciseangia\noldpeak\nslope\nnoofmajorvessels\ntarget\n\n\n\n\ncount\n1.000000e+03\n1000.00000\n1000.000000\n1000.000000\n1000.000000\n1000.000000\n1000.000000\n1000.000000\n1000.000000\n1000.000000\n1000.000000\n1000.000000\n1000.000000\n1000.000000\n\n\nmean\n5.048704e+06\n49.24200\n0.765000\n0.980000\n151.747000\n311.447000\n0.296000\n0.748000\n145.477000\n0.498000\n2.707700\n1.540000\n1.222000\n0.580000\n\n\nstd\n2.895905e+06\n17.86473\n0.424211\n0.953157\n29.965228\n132.443801\n0.456719\n0.770123\n34.190268\n0.500246\n1.720753\n1.003697\n0.977585\n0.493805\n\n\nmin\n1.033680e+05\n20.00000\n0.000000\n0.000000\n94.000000\n0.000000\n0.000000\n0.000000\n71.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n25%\n2.536440e+06\n34.00000\n1.000000\n0.000000\n129.000000\n235.750000\n0.000000\n0.000000\n119.750000\n0.000000\n1.300000\n1.000000\n0.000000\n0.000000\n\n\n50%\n4.952508e+06\n49.00000\n1.000000\n1.000000\n147.000000\n318.000000\n0.000000\n1.000000\n146.000000\n0.000000\n2.400000\n2.000000\n1.000000\n1.000000\n\n\n75%\n7.681877e+06\n64.25000\n1.000000\n2.000000\n181.000000\n404.250000\n1.000000\n1.000000\n175.000000\n1.000000\n4.100000\n2.000000\n2.000000\n1.000000\n\n\nmax\n9.990855e+06\n80.00000\n1.000000\n3.000000\n200.000000\n602.000000\n1.000000\n2.000000\n202.000000\n1.000000\n6.200000\n3.000000\n3.000000\n1.000000\n\n\n\n\n\n\n\nViewing the average for target, we get a value of .58, meaning a little more than half of our dataset contains presence of cardiovascular disease. Returning to the age column, we see that the average age is around 49 years, with the oldest being 80 and the youngest being 20. In addition, most of our dataset is compromised of males (about 77% of the dataset). Further domain knowledge is necessary to identify whether the other features respective statistics are “good” or “bad” values (healthy or not healthy).\nWhile the tabular statistical information above is valiable, visual representations of the data are valiable to present so that we can quickly digest how our data looks. Below is a bar plot of the target values.\n\n\n\n\n\nFigure 3.1: Bar plot of target count using seaborn. As noted from the summary statistics, the dataset contains more 1s than 0s for target, indicating a higher presence of heart disease in the sample.\n\n\n\n\nWe can now visually see the imbalance of data in our dataset. There appears to be about 150 more 1s than 0s in the dataset. We will demonstrate later in the analysis how logistic regression is a good choice for handling unbalanced datasets. For now, we will continue to explore the dataset. While we clearly see above that there is a difference between the number of patients with and without heart disease, we should discover more information about who pertains to each target value. To do this, we can use a box-and-whisker plot to view the distribution of a variable separated by target value. Below is a box-and-whisker plot of the age distribution for 0 and 1 target values respectively.\n\n\n\n\n\nFigure 3.2: Box-and-whisker plot of the distribution of age between the 2 target values. While the bar plot in Figure 3.1 showed a difference in the number of each target value, this plot shows there is no big difference in age distribution between the 2 target values.\n\n\n\n\nThe median for each respective target value appears to be 50, with a bit more variance for target value 0 than in target value 1, probably due to a smaller sample size. Nonetheless, we see that the age distribution for those who do not have and do have heart disease appear to be approximately the same.\nTo speed up the process of EDA, we can plot several box-and-whisker plots to view distribution of many variables split by target value. Figure 3.3 shows the distribution of other features in our dataset split by target value.\n\n\n\n\n\nFigure 3.3: A 4x2 grid of box-and-whisker plots to speed up EDA ingestion. There are a few features that appear to show differing distributions between target values, such as level of chest pain and resting BP.\n\n\n\n\nViewing a grid of box-and-whisker plots allows us to quickly review the distributions for each target value for each feature specified. There appears to be a few features that have differing distributions, such as chestpain, restingBP, and fastingbloodsugar. Clearly delineated differences between target values will be useful for our logistic regression model in identifying patients with heart disease.\nUsing the information from Figure 3.3, we can create a scatterplot to explore more in-depth the relationship between these features with differing distributions. Below in Figure 3.4, we show a 1x2 grid scatterplot. The left hand panel is maxheartrate by serumcholestrol and the right hand panel is restingBP by serumcholestrol.\n\n\n\n\n\nFigure 3.4: Scatterplots showing 2 quantitative variables, colored by target and symbolized by gender. The left hand panel shows maxheartrate by serumcholestrol and the right hand panel shows restingBP by serumcholestrol.\n\n\n\n\nLooking at the left hand panel, we see that most of the 1 target values (heart disease) are either 0-100 or above 380ish. Most 0 values fall between 150-350ish on serumcholestrol. There does not appear to be any significant differenec between genders as they both appear to be intermixed fairly well. For the right hand panel, we see a more delineated difference for restingBP. There appears to be very few 0 values in the range of 140-200 restingBP. As well, Those above 140 restingBP and above 350 serumcholestrol appear to have a higher concentration of 1 target values. Additionally, there appears to be more males within the range of 140-180 restingBP who have target value of 1 whereas females who have a target value of 1 have a higher restingBP, more towards the range of 180-200 restingBP.\nTo explore the relationship of presence of heart disease and chestpain and noofmajorvessels, we can use countplots split by target value for each resepective level of chestpain and noofmajorvessels.\n\n\n\n\n\nFigure 3.5: A 1x2 grid of countplots. The left hand panel shows the counts for each bucket of chestpain split by target value. The right hand panel shows the counts for each bucket of noofmajorvessels split by target value.\n\n\n\n\nIn the left hand panel of Figure 3.5, we see that as the level of chest pain increases, the proportion of those who have heart disease increase. Additionally, in the right hand panel, as we increase in noofmajorvessels, there is a greater proprotion of those who have heart disease.\n\n\nVerify Model Assumptions\nIn order to properly model this data using logistic regression, we need to verify a few assumptions. First, we need to verify that our observations are independent of one another, that is that no observation mathematically influences any other observation. Thinking logically, we can verify this assumption that someone’s restingBP does not affect any other restingBP, and so forth for every feature found in the dataset. Therefore, we can model our dataset as shown in Equation 4.1.\n\\[\nX_1, ... ,X_n \\sim \\text{ i.i.d. Bernoulli(p)}\n\\tag{4.1}\\]\nThe second assumption we should verify is that of multicollinearity. Multicollinearity occurs when features of a dataset are highly correlated with one another. This results in variance inflation which throws off the standard errors used in statistical modeling calculations. Below are the respective VIF scores for each feature in the dataset.\n\n\n    vif_factor           features\n0     7.407596                age\n1     4.817933             gender\n2     2.769973          chestpain\n3    19.558195          restingBP\n4     6.841284    serumcholestrol\n5     1.631514  fastingbloodsugar\n6     2.275207    restingrelectro\n7    15.313735       maxheartrate\n8     1.957391      exerciseangia\n9     4.107705            oldpeak\n10    6.588688              slope\n11    3.622189   noofmajorvessels\n\n\nA general rule of thumb is that VIF scores above 10 should be eliminated. Therefore, we will remove restingBP and maxheartrate from the dataset in order to verify the assumption of multicollinearity.\n\n\n   vif_factor           features\n0    5.686277                age\n1    4.227614             gender\n2    2.769430          chestpain\n3    5.649147    serumcholestrol\n4    1.629010  fastingbloodsugar\n5    2.247908    restingrelectro\n6    1.883431      exerciseangia\n7    4.075928            oldpeak\n8    6.053960              slope\n9    3.597850   noofmajorvessels\n\n\nAs we can see above in the new VIF scores, none of the scores are above 10 so we will accept these features as passed for the multicollinearity assumption.\nThe last assumption we will verify for our logistic regression model is the linearity assumption, or better said, the monotonicity assumption. We assume that each feature has a monotonic relationship with the target (response) variable. Below, we view this relationship in Figure 4.1\n\n\n\n\n\nFigure 4.1: A 2x5 grid of logistic regression plots, modeling the relationship between a given feature and the target variable. Each feature should have an approximate monotonic relationship with the target variable in order to verify the assumption of monotonicity.\n\n\n\n\nFrom Figure 4.1, we see that each plot demonstrates a monotonic-esque relationship. Therefore, we can verify the monotonicity assumption.\n\n\nModel Creation\nUsing Equation 4.1, we can model our data using the logit function to create a linear relationship with the betas and features and the log-odds of the data. This relationship is shown in Equation 5.1.\n\\[\n\\text{log}(\\frac{p(X)}{1-p(X)}) = \\beta_0 + \\beta_1x_1 ... + \\beta_px_p\n\\tag{5.1}\\]\nAfter fitting Equation 5.1 to our data, we obtain the below results.\n\n\n                 Generalized Linear Model Regression Results                  \n==============================================================================\nDep. Variable:                 target   No. Observations:                  750\nModel:                            GLM   Df Residuals:                      739\nModel Family:                Binomial   Df Model:                           10\nLink Function:                  Logit   Scale:                          1.0000\nMethod:                          IRLS   Log-Likelihood:                -78.442\nDate:                Fri, 12 Jan 2024   Deviance:                       156.88\nTime:                        12:38:31   Pearson chi2:                     349.\nNo. Iterations:                     9   Pseudo R-squ. (CS):             0.6830\nCovariance Type:            nonrobust                                         \n=====================================================================================\n                        coef    std err          z      P&gt;|z|      [0.025      0.975]\n-------------------------------------------------------------------------------------\nconst               -10.4812      1.364     -7.682      0.000     -13.156      -7.807\nage                  -0.0008      0.012     -0.066      0.947      -0.025       0.023\ngender                2.4959      0.565      4.418      0.000       1.389       3.603\nchestpain             1.2328      0.255      4.836      0.000       0.733       1.733\nserumcholestrol       0.0012      0.002      0.696      0.487      -0.002       0.004\nfastingbloodsugar     0.8571      0.506      1.695      0.090      -0.134       1.848\nrestingrelectro       1.2382      0.316      3.920      0.000       0.619       1.857\nexerciseangia        -0.3699      0.435     -0.849      0.396      -1.223       0.484\noldpeak              -1.1640      0.208     -5.589      0.000      -1.572      -0.756\nslope                 7.1061      0.840      8.460      0.000       5.460       8.752\nnoofmajorvessels      0.1789      0.232      0.770      0.441      -0.276       0.634\n=====================================================================================\n\n\nIn the results above, of the features in the dataset fitted to the model, 5 of them are statistically significant (gender, chestpain, restingelectro, oldpeak, and slope). Of those 5 stat sig. features, only 1 of them has an average negative log-odds effect on classification of heart-disease (oldpeak).\nWhile viewing these betas in their log-odds form is helpful to indicate whether a feature positively or negatively influence the classification of heart-disease, transforming these values into probabilities may be easier to interpret. Below, we transform the betas to probabilities.\n\n\nconst                0.000028\nage                  0.499799\ngender               0.923852\nchestpain            0.774311\nserumcholestrol      0.500289\nfastingbloodsugar    0.702057\nrestingrelectro      0.775258\nexerciseangia        0.408566\noldpeak              0.237940\nslope                0.999181\nnoofmajorvessels     0.544604\ndtype: float64\n\n\nFor example, on average, an increase of 1 in slope results in a .99 factor increase of having heart disease, holding all else constant. It appears that slope and gender have the highest probability factor increase in having heart disease. Let us use these factors to see what the model would predict for the following mock data set: male, age 25, no chest pain, 100 serum cholestrol, 0 fasting blood sugar, resting electro 0, exerciseangia 0, oldpeak 1, slope 0, and noofmajorvessels 0.\n\n\nLog-odds:  0.000117\nOdds-ratio:  1.000117\nProbability:  0.500029\n\n\nThe results above show that our model precicts, on average, that a person with the above characteristics would have an odds-ratio of about 1, or a probability of about 50% of having heart disease. Some may be confused by this result, as the above parameters show increases in probability that should result in a value closer than 1 for an additive model. However, one must remember that it is an additive model by logit (see Equation 5.1). To obtain probabilities, we have to inverse the logit function to isolate \\(p(X)\\), as shown in Equation 5.2.\n\\[\np(X) = \\frac{e^{\\beta_0 + \\beta_1x_1 ... + \\beta_px_p}}{1 + e^{\\beta_0 + \\beta_1x_1 ... + \\beta_px_p}}\n\\tag{5.2}\\]\n\n\nModel Assessment\nAs shown above, our logistic regression model now has predictive capabilties after being fit to the data. In order to gather a general idea of how well it does on testing data, we will perform a validation test set approach, where we withhold 25% of the data to be our test set and 75% of our data will be used as training data for the model. Afterwards, we can evaluate the predictive capability of our model by assessing its roc curve and auc score. These can be found in Figure 6.1\n\n\n\n\n\nFigure 6.1: ROC curve showing how the logistic regression model performed on the test set, with corresponding auc score in bottom right-hand corner of plot.\n\n\n\n\nOur ROC curve in Figure 6.1 shows a nice elbow feature, indicating that our model performs very well at indicating true positives. In addition, our AUC score of .99 shows that our model performs very well at distinguishing between the true positives and false positives, meaning we have very good predictive performance in our logistic regression model. Using these metrics, we can find the optimal classification threshold that maximizes the true positive rate and minimizes that false positive rate. Below is our optimal threshold.\n\n\n0.6519052347690012\n\n\nOur optimal threshold of approximately .65 indicates that we would classify anyone with a probability of heart disease above 65% as 1 (having heart disease) and anyone below 65% probability will be classified as 0 (no heart disease). We can use this value on our test set to create a confusion matrix and see the exact number of true positives and false positives. We can then utilize those numbers to calculate other metrics for model assessment such as sensitivity and specificity. The confusion matrix is found in Figure 6.2.\n\n\n\n\n\nFigure 6.2: Confusion matrix for our logistic regression model. The y axis indicates the true labels of the data and the x axis indicate the predicted label from our model.\n\n\n\n\nAs we can see in the confusion matrix, our model does a great job at predicting true positives and true negatives. The model only mispredicted 1 true negative (generated 1 false negative) and mispredicted 7 true positives (generated 7 false positives). As mentioned above, we can use these numbers to view just how well our model does at identifying true positives and true negatives. Below are the metrics we calculated.\n\n\nAccuracy:  0.968\nSensitivity:  0.9507\nSpecificity:  0.9907\nPPV:  0.9926\nNPV:  0.9386\n\n\nAs shown above, even in our inbalanced data set, we achieved an accuracy of about 97%. Additionally, our sensitivity shows our model is very good at identifying true positives, scoring about 95%. Our specificity score was even better, scoring a 99%, meaning our model is almost perfect at identifying those who do not have the disease (true negatives). Positive predictive value and negative predictive value also prove to be very good, with 99% and 93% respectively. For PPV, this means the probability someone has the disease, given that they tested positive (classified as a 1), is 99%. For NPV, this means the probability someone doesn’t have the disease, given they tested negative (classified as a 0), is 93%.\nThis numbers, when we take into account our threshold value (.65), makes sense since we classify people with heart disease if and only if they are above 65% probability. Otherwise, they are classified as not having heart disease. For reference on how we calculated the above values, see Equation 6.1.\n\\[\nSensitivity = \\frac{TP}{TP+FN}\n\\]\n\\[\nSpecificity = \\frac{TN}{TN+FP}\n\\]\n\\[\nPPV = \\frac{TP}{TP+FP}\n\\]\n\\[\nNPV = \\frac{TN}{TN+FN}\n\\tag{6.1}\\]\n\n\nBayesian Model Creation"
  },
  {
    "objectID": "posts/stat_685_proj/final_project.html",
    "href": "posts/stat_685_proj/final_project.html",
    "title": "Forecasting Enrollment Size by Class at TAMU",
    "section": "",
    "text": "Forecasting enrollment for individual classes is important for departments and colleges at universities. It allows them to properly prepare adequate resources for students, such as: hiring the right number of TAs, offering the correct number of sections for classes, and assigning classes to the proper lecture halls. Needless to say, forecasting accurately the number of students signing up for a particular class is of high interest and need. Additionally, if possible, understanding the driving factors behind why certain classes are more popular or which classes are the most variable semester-to-semester is of particular interest.\nWe demonstrate in this post the power of Bayesian forecasting, utilizing a two-part model. The first part forecasts the percent change in enrollment for the upcoming semester compared to the previous semester. The second part forecasts the percent change in percent share of total enrollment at Texas A&M University."
  },
  {
    "objectID": "posts/stat_685_proj/final_project.html#feature-engineering-and-data-preprocessing",
    "href": "posts/stat_685_proj/final_project.html#feature-engineering-and-data-preprocessing",
    "title": "Forecasting Enrollment Size by Class at TAMU",
    "section": "Feature Engineering and Data Preprocessing",
    "text": "Feature Engineering and Data Preprocessing\nNow that we are somewhat familiar with the data we are working with and the possibilities of how the data can be modeled, we begin compiling the data into one large dataframe. Below is a beginning result of our mergers between dataframes.\n\n\n\n\n\n\n\n\n\nTERM\nCollege\nSubject\nCourse_Number\nis_fall\ncount_students\ncount_freshmen\n\n\n\n\n950\n20213.0\nEN\nENGR\n102.0\nTrue\n4549\n4549\n\n\n2475\n20221.0\nEN\nENGR\n102.0\nFalse\n278\n81\n\n\n4351\n20223.0\nEN\nENGR\n102.0\nTrue\n4993\n4945\n\n\n6583\n20233.0\nEN\nENGR\n102.0\nTrue\n4925\n4869\n\n\n\n\n\n\n\nFrom our sample taken from our newly merged dataframe, we have successfully important data points down to a class and term specific level. We will continue to modify this by adding and removing variables as we see fit. Please refer to the complete code found in the github repo for full information on how the complete data cleaning process was completed."
  },
  {
    "objectID": "posts/stat_685_proj/final_project.html#model-1-overall-pct_change-in-enrollment",
    "href": "posts/stat_685_proj/final_project.html#model-1-overall-pct_change-in-enrollment",
    "title": "Forecasting Enrollment Size by Class at TAMU",
    "section": "Model 1: Overall pct_change in Enrollment",
    "text": "Model 1: Overall pct_change in Enrollment\n\n\n\n                mean       std    median      5.0%     95.0%     n_eff     r_hat\n        mu      0.02      0.01      0.02      0.00      0.04    682.95      1.00\n     sigma      0.01      0.01      0.01      0.00      0.03    596.88      1.00\n\nNumber of divergences: 62\n\n\nTraining our model on just the percent change between 2021-2022 fall terms, we see our model has shifted the mean of our parameter \\(\\mu\\) from 0.03 to 0.02. Additionally, our sd shrunk as well from 0.02 to 0.01. Our r_hat values of 1.00 and high n_eff scores are good indicators that our model achieved stationarity and good mixing. To continue to confirm that our model has good MCMC diagnostics, we view the trace plots for each of our parameters of interest (see Figure 4.1).\n\n\n\n\n\nFigure 4.1: Trace plots for mu and sigma\n\n\n\n\nFigure 4.1 shows that our sampler mixed well and converged well, as both plots don’t appear to get stuck in any one particular region for too long.\nFigure 4.2 below shows how our prior has been updated using the MAP estimates from our sampler. We see visually what we noticed in the table above, that our posterior became more peaked and shifted left about the x axis.\n\n\n\n\n\nFigure 4.2: Prior and posterior distributions based on MAP values\n\n\n\n\nWhile Figure 4.2 is informative in showing how the MAP values update our prior, the power of Bayesian analysis comes from viewing the entire distribution of each parameter of interest and subsequently using those distributions to provide a predictive distribution, or posterior predictive distribution from which we can gather inference and make forecasts. Below in Figure 4.3 we see the complete distributions for each parameter of interest.\n\n\n\n\n\nFigure 4.3: Posterior distributions of mu and sigma\n\n\n\n\nFigure 4.3 shows that our mu distribution still appears to be approximately normal, centered around 0.02. Our posterior of sigma is less peaked (almost bimodal) but is generally centered around 0.01. Our mu distribution shows that while it is most likely that we have an increase of student enrollment around 2% for this upcoming year, it is within reasonable probability that we could see no increase (eg 0% change). We can use 95% credible intervals to demonstrate what plausible values are within 95% probability for each parameter or interest.\n\n\n95% CI for mu: (-0.001442579022841527, 0.046437517087906624)\n\n\n\n\n95% CI for sigma: (0.0015739109367132187, 0.04049663208425045)\n\n\nOur 95% CI for mu shows that within our 95% probability range, we could possibly see a decrease in student enrollment (be it a small one), but that the majority of our 95% CI includes positive values, meaning we would more than likely see some kind of increase for the next fall term."
  },
  {
    "objectID": "posts/stat_685_proj/final_project.html#posterior-predictive-distribution-change-in-enrollment",
    "href": "posts/stat_685_proj/final_project.html#posterior-predictive-distribution-change-in-enrollment",
    "title": "Forecasting Enrollment Size by Class at TAMU",
    "section": "Posterior Predictive Distribution (% Change in Enrollment)",
    "text": "Posterior Predictive Distribution (% Change in Enrollment)\nAs mentioned previously, we can now make predictions utilizing our posterior distributions. This is done by integrating out all of our parameters of interest (see Equation 4.1).\n\\[\np(\\overset{\\sim}{y}|y_{1}...y_{n}) = \\int_{\\Theta} p(\\overset{\\sim}{y}|\\theta)p(\\theta|y)\n\\tag{4.1}\\]\nWhat Equation 4.1 says is that in order for us to derive the posterior predictive distribution, integrate across all possible parameters of interest (in our case, mu and sigma) to derive a single distribution, conditioned upon our observed data. Our resulting posterior predictive distribution is found in Figure 4.4.\n\n\n\n\n\nFigure 4.4: Posterior predictive distribution for predicting percent change in enrollment\n\n\n\n\n\n\nMean of PPD: 0.019076179713010788\n\n\n\n\n95% CI of PPD: (-0.023650801740586758 , 0.07064365874975921)\n\n\nOur posterior predictive distribution is centered around 2% still but appears to be a wider distribution. This is because of our wider interval with our sigma distribution. Nonetheless, it is still an approximately normal distribution centered around 2% with corresponding 95% CI (or PI in this case) stating that with 95% probability the percent change in enrollment for the upcoming fall term will be between -2% and 7%. While this interval may be wider than desired, for utilizing only one training point of data and our weakly informative prior, it is a sufficient resource in predicting our fall enrollment for TAMU.\nTo make specific predictions using this distribution, we can utilize the MAP for a point estimate and the 95% CI for a range of predictions. Those results are shown below.\n\n\nBayesian Prediction of Enrollment: 57346\nActual Enrollment: 58933\n\n\n\n\n95% Prediction Interval for Enrollment: (55098, 60158)\n\n\nAs we can see, our Bayesian prediction performed much better than our ARIMA model (granted it was a (0,0,0) model). Additionally, our 95% PI captures the actual value for fall 2023 enrollment at TAMU. As our model continues to receive more data, it will be able to shrink its PI range and have more precise predictions for our forecasts. Nonetheless, we have a viable first model at predicting enrollment at TAMU."
  },
  {
    "objectID": "posts/stat_685_proj/final_project.html#more-exploration-for-enhanced-bayesian-modeling",
    "href": "posts/stat_685_proj/final_project.html#more-exploration-for-enhanced-bayesian-modeling",
    "title": "Forecasting Enrollment Size by Class at TAMU",
    "section": "More exploration (For enhanced Bayesian Modeling)",
    "text": "More exploration (For enhanced Bayesian Modeling)\nWhile the above model successfully performed better than our “frequentist” approach, it still has not accomplished our ultimate goal of forecasting down to the classroom level. How can we utilize our first model as a viable resource to build a second model that can forecast down to the classroom level?\nThe question to explore now is “do we believe that the percent share of enrollment by class varies or is relatively constant?”. Essentially, if we discover that classes are generally consistent in how much percent of enrollment they take each fall term, then we can build a model that forecasts from our first model and utilizes class specific information to predict its percent share of enrollment. For example, suppose we have an intro level math class that for 3 fall terms had percent share of enrollment of: 2%, 3%, 4%. Utilizing our first model that predicts the entire university enrollment, we can generate a posterior predictive distribution that can predict the percent change in percent share of enrollment and multiply that change in value by the first predicted value (total university enrollment) to get a class specific enrollment value. Equation 4.2 shows the more pretty math behind this intuition.\n\\[\n\\text{class level enrollment} = (\\text{LY } \\% \\text{ enrollment} * (1 + \\% \\text{ change in enrollment})) * (\\text{forecasted enrollment})\n\\tag{4.2}\\]\nBelow is an example table of the data we will utilize to forecast percent share of total enrollment by class.\n\n\n\n\n\n\n\n\n\nSubject\nCourse_Number\nis_fall\nyear\ncount_students\npct_of_enroll\n\n\n\n\n815\nAERS\n101.0\nTrue\n2021\n250\n0.004513\n\n\n5784\nAERS\n101.0\nTrue\n2022\n293\n0.005211\n\n\n8394\nAERS\n101.0\nTrue\n2023\n339\n0.005752\n\n\n821\nAERS\n105.0\nTrue\n2021\n607\n0.010957\n\n\n5790\nAERS\n105.0\nTrue\n2022\n589\n0.010476\n\n\n\n\n\n\n\nWe can build out our formula from Equation 4.2 by creating a new column in our full dataframe to calculate the percent change in percent share of enrollment. Below is an example of this using an intro math class (MATH 140) at TAMU (see last column).\n\n\n\n\n\n\n\n\n\nCollege\nSubject\nCourse_Number\nis_fall\ncount_students\ncount_freshmen\ncount_sophomore\ncount_junior\ncount_senior\ntarget_fresh_adm\n...\ncon_over_target\ncon_over_count_fresh\nyear_adm\ncount\nyr_count\npct_share\npct_class_share\ntotal_enroll\npct_of_enroll\npct_enroll_yoy\n\n\n\n\n107\nAT\nMATH\n140.0\nTrue\n3594\n3190\n294\n72\n38\n2650\n...\n0.953962\n0.792476\n2021\n4158\n16207\n0.256556\n0.196829\n55400\n0.064874\nNaN\n\n\n5049\nAT\nMATH\n140.0\nTrue\n3552\n2975\n412\n114\n51\n2650\n...\n0.909057\n0.809748\n2022\n3924\n15956\n0.245926\n0.186450\n56222\n0.063178\n-0.026136\n\n\n7656\nAT\nMATH\n140.0\nTrue\n4392\n3744\n456\n139\n53\n2650\n...\n0.961887\n0.680823\n2023\n4076\n17415\n0.234051\n0.214987\n58933\n0.074525\n0.179606\n\n\n\n\n3 rows × 26 columns\n\n\n\nAnd another example of an intro aerospace course (AERS 101).\n\n\n\n\n\n\n\n\n\nCollege\nSubject\nCourse_Number\nis_fall\ncount_students\ncount_freshmen\ncount_sophomore\ncount_junior\ncount_senior\ntarget_fresh_adm\n...\ncon_over_target\ncon_over_count_fresh\nyear_adm\ncount\nyr_count\npct_share\npct_class_share\ntotal_enroll\npct_of_enroll\npct_enroll_yoy\n\n\n\n\n815\nEN\nAERS\n101.0\nTrue\n250\n243\n5\n1\n1\n3250\n...\n0.920000\n12.304527\n2021\n4871\n16207\n0.300549\n0.014994\n55400\n0.004513\nNaN\n\n\n5784\nEN\nAERS\n101.0\nTrue\n293\n286\n7\n0\n0\n3250\n...\n1.110154\n12.615385\n2022\n5240\n15956\n0.328403\n0.017924\n56222\n0.005211\n0.154865\n\n\n8394\nEN\nAERS\n101.0\nTrue\n339\n329\n9\n0\n1\n3250\n...\n1.052000\n10.392097\n2023\n5263\n17415\n0.302211\n0.018892\n58933\n0.005752\n0.103773\n\n\n\n\n3 rows × 26 columns\n\n\n\nAnother thing we notice about these classes is an obvious one: they’re different sizes! However, we know that they aren’t all unique in their own size. We can bucket these classes into arbitrary sizes (small, medium, large, etc.) to aid our model in identifying more specifically how certain class sizes vary on their percent change in percent share of enrollment. Below in Figure 4.5 shows a distribution of count of students for classes.\n\n\n\n\n\nFigure 4.5: Histogram of count of students in classes\n\n\n\n\nAs we can see, the great majority of class sizes are found below 1000 students. We will need to take this into account when deciding how to divide our class size lines. While there are different ways of performing this in a more analytical way (i.e. segmentation analysis), we will arbitrarily decide on these buckets based on our EDA (see github repo for full EDA code).\nOne plot that we will include in this post is found in Figure 4.6. This figure shows the distribution for percent change in percent share of enrollment for each of our arbitrarily selected class sizes.\n\n\n\n\n\nFigure 4.6: 2x4 grid of histograms showing the distribution of percent change in percent share of enrollment for each class size\n\n\n\n\nFigure 4.6 is telling in many ways. First, x-small classes are generally non-variable with a few large outliers (this also is acceptable because a x-small class can double in size fairly easily). Small, medium, and large classes are approximately normal in their distribution because these are the class sizes with the most observations (kind of like a fun way of seeing the CLT). All other larger classes appear almost uniform in their distributions due to their small respective sample sizes."
  },
  {
    "objectID": "posts/stat_685_proj/final_project.html#model-2-bayesian-hierarchical-model-class-size",
    "href": "posts/stat_685_proj/final_project.html#model-2-bayesian-hierarchical-model-class-size",
    "title": "Forecasting Enrollment Size by Class at TAMU",
    "section": "Model 2: Bayesian Hierarchical Model (class size)",
    "text": "Model 2: Bayesian Hierarchical Model (class size)\nAs noted in some of the EDA above, the effects of each class size vary. While they are different, they aren’t completely different (as noted in Figure 4.6). To account for each class size effect individually, we utilize a hierarchical model to allow each class size to pull from a common distribution but to allow their respective effects to take update our prior beliefs. Below is the mathematical representation of our hierarchical model.\n\\[\n\\theta \\sim N(\\mu_{j}, \\sigma_{j})\n\\]\n\\[\n\\mu_{j} \\sim N(0, 0.2)\n\\]\n\\[\n\\sigma_{j} \\sim HN(0.2)\n\\]\nModeling it this way essentially allows our parameter of interest, \\(\\theta\\) to account for between-group variability based on the \\(\\mu_{j}\\) and \\(\\sigma_{j}\\) values while each respective \\(\\mu{j}\\) and \\(\\sigma_{j}\\) accounts for the within-group variability. This kind of flexibility will allow our model to predict down to specific classes based on the corresponding class size. After fitting our model to the data, we obtain the below results.\n\n\n\n                    mean       std    median      5.0%     95.0%     n_eff     r_hat\n   class_mu[0]      0.13      0.02      0.13      0.09      0.17   3864.53      1.00\n   class_mu[1]      0.12      0.02      0.12      0.09      0.16   4569.29      1.00\n   class_mu[2]      0.09      0.01      0.09      0.07      0.12   5660.38      1.00\n   class_mu[3]      0.11      0.02      0.11      0.07      0.15   5829.37      1.00\n   class_mu[4]      0.08      0.04      0.08      0.01      0.15   2455.60      1.00\n   class_mu[5]      0.02      0.02      0.02     -0.01      0.05   3977.78      1.00\n   class_mu[6]     -0.03      0.04     -0.03     -0.09      0.03   1414.55      1.00\n   class_mu[7]      0.01      0.05      0.01     -0.06      0.09   2553.92      1.00\nclass_sigma[0]      1.22      0.02      1.22      1.19      1.25   5456.28      1.00\nclass_sigma[1]      0.55      0.02      0.55      0.53      0.58   2663.55      1.00\nclass_sigma[2]      0.44      0.01      0.44      0.42      0.46   3291.40      1.00\nclass_sigma[3]      0.36      0.02      0.36      0.33      0.38   2453.18      1.00\nclass_sigma[4]      0.24      0.03      0.23      0.19      0.28   2273.90      1.00\nclass_sigma[5]      0.07      0.01      0.07      0.05      0.09   2460.03      1.00\nclass_sigma[6]      0.08      0.04      0.07      0.03      0.13    965.08      1.00\nclass_sigma[7]      0.13      0.05      0.12      0.07      0.19   2506.08      1.00\n            mu      0.05      0.11      0.05     -0.13      0.23   3127.97      1.00\n         sigma      0.37      0.06      0.36      0.27      0.46   2508.96      1.00\n\nNumber of divergences: 0\n\n\nclass_mu[0] represents the distribution for class size x-small while class_mu[7] represents class size giant. All other class sizes are between these ranges in ascending order (x-small to giant). Additionally, our n_eff and r_hat scores show that our sampler performed very well and that each distribution achieved sufficient stationarity and good mixing. To confirm our results using visuals, we can look at Figure 4.7.\n\n\n\n\n\nFigure 4.7: 2x8 trace plots of each class size. Top row are mu trace plots and bottom row are sigma trace plots\n\n\n\n\nFrom Figure 4.7, we see that each mu and sigma trace plot per class appear to have good mixing and acceptable stationarity. Now that we have checked our MCMC diagnostics, we can begin exploring the generated posteriors from our model. Figure 4.8 shows respective distributions for class size’s mu parameter.\n\n\n\n\n\nFigure 4.8: 2x4 grid of posterior distributions for each class size for parameter mu\n\n\n\n\nFigure 4.8 shows each class size mu parameter is approximately normally distributed. It is interesting to note where each distribution is centered. X-small is centered around .13 whereas larger classes like xxx-large are more centered around 0. It appears the there is a higher chance for smaller classes to have an increase in percent change in percent share of enrollment, whereas larger classes don’t vary as much. Larger classes seem to stay most constant term by term, which is not too surprising. A similar plot for class size sigma parameter is found in Figure 4.9.\n\n\n\n\n\nFigure 4.9: 2x4 grid of posterior distributions for each class size for parameter sigma\n\n\n\n\nOnce again, we notice that as the class size increases, the variability in sigma decreases.\n\nPosterior Predictive Distribution (Hierarchical Model)\nJust as we performed in the first model of this analysis, we will generate a posterior predictive distribution to make class specific predictions. Since we built a hierarchical model, we will generate 8 separate PPDs for each class size. Figure 4.10 shows the respective PPD for each class size.\n\n\n\n\n\nFigure 4.10: 2x4 grid of posterior predictive distributions for each class size\n\n\n\n\nFigure 4.10 shows just how variable the smaller classes can be. While the x-small through medium classes are all relatively centered around 0 (possibly due to scale of x axis), the variation in their predictions are fairly wide, especially in x-small classes. However, this should not be too problematic as an x-small class of size 10, even doubling in size, would only be 20. More than likely 1 professor and 1 TA would still be sufficient for this class.\nIn contrast, we see that our larger classes do not have nearly as much predicted variability (a repeated theme we have mentioned a lot). This is good to know since these classes require the most resources. Since they appear to be reliably consistent, we can “trust” more in the predictions and know they will not be too far off from the usual.\nFor example, take the class MATH 140 at TAMU. It is considered an intro level math course that many students must take in order to progress in their respective majors. It is considered a xxx-large class due to its popularity. Below is a point prediction for this class.\n\n\nBayes Prediction for % change in pct_enroll: -0.027\nTrue Value for % change in pct_enroll: 0.180\n\n\nThe model, due to its MAP, incorretly predicted the percent change in percent share of enrollment. However, point estimates in continuous predictions are rarely ever correct and thus require an interval prediction to ensure that our model at least captures the value within the interval. Below is a 95% PI for MATH 140.\n\n\n95% Prediction Interval for % change in pct_enroll: (-0.229, 0.179)\n\n\nAs we can see, our interval would include the actual value (even if it is on the farthest outside). This indicates that the true value that occured is in fact a possibel anomaly. That is, it is a plausible value but is just not very likely. Nonetheless, because we used a Bayesian approach, we can probabilistically say that it is a possible value in the range of 95% probability.\nIn order to properly predict the actual count of student enrollment by class, as mentioned previously, we use Equation 4.2. Below is the predicted number of students, both point estimate and 95% PI.\n\n\nPoint Estimate for MATH 140: 3527\nActual Value for MATH 140: 4392\n\n\n\n\n95% Prediction Interval for MATH 140: (2794, 4271)\n\n\nAs we can see, the 95% prediction interval is not far off from the actual value. The missing values would be trivial in such a large class forecast (at least for allocating university resources). While this test case has been informative, we should test another class to ensure our model is not always facing possible anomalies. To do this, we will look at MATH 308. Below is the point prediction for MATH 308.\n\n\nBayes Prediction for % change in pct_enroll: 0.105\nTrue Value for % change in pct_enroll: 0.051\n\n\nAs we can see, this time our model is over estimating the point estimate for percent change in percent share of enrollment. Our model predicts about a 10% increase in percent share of enrollment when the actual 2023 value was about 5%. While the point estimate is incorrect, it is not too far off in terms of practical prediction. Below is the corresponding 95% PI and resulting predictions from the point estimate and the PI.\n\n\n95% Prediction Interval for % change in pct_enroll: (-0.610, 0.832)\n\n\n\n\nPoint Estimate for MATH 308: 990\nActual Value for MATH 308: 967\n\n\n\n\n95% Prediction Interval for MATH 308: (349, 1640)\n\n\nAs mentioned above, our point estimate from a practical point of view is not too far from the actual value and would not have any major ramifications from a resource allocation point of view. Our 95% PI though, it quite wide. While it is slightly narrower than our 95% PI for MATH 140, it is still a very large range that would not be too useful for forecasting. Nonetheless, this model has proven to be very useful in predicting (especially from a practical point of view) the percent change in percent share of enrollment. Combined with the first model, we have created a system for forecasting class enrollment down to specific class levels."
  },
  {
    "objectID": "posts/stat_685_proj/final_project.html#model-3-bayesian-hierarchical-linear-model-college-and-class-size",
    "href": "posts/stat_685_proj/final_project.html#model-3-bayesian-hierarchical-linear-model-college-and-class-size",
    "title": "Forecasting Enrollment Size by Class at TAMU",
    "section": "Model 3: Bayesian Hierarchical Linear Model (college and class size)",
    "text": "Model 3: Bayesian Hierarchical Linear Model (college and class size)\nWhile our Bayesian hierarchical model proved to be a useful model in our system for forecasting class enrollment, we believe we can do better given the amount of information we have. Another useful piece of information that we can utilize is college. Specifying to which college each class size pertains can help our model distinguish more clearly the percent change in percent share of enrollment for a specific class. Our model will then be an additive model, where we have two covariates (college and class size) predicting our response (% change in % share of enrollment). Below is the mathematical form of our model.\n\\[\nY_{ijk} = X_{ijk}\\beta_{jk} + \\epsilon_{ijk}\n\\]\n\\[\n\\epsilon_{ijk} \\sim N(0, \\sigma^{2})\n\\]\n\\[\nY_{jk} \\sim MVN(X_{jk}\\beta_{jk}, \\sigma^{2}I)\n\\]\n\\[\n\\beta_{j} \\sim N(\\mu_{m},\\sigma_{m}^{2})  \n\\]\n\\[\n\\beta_{k} \\sim N(\\mu_{t}, \\sigma_{t}^{2})\n\\]\n\\[\n\\mu_{m} \\sim N(0, 0.5)\n\\]\n\\[\n\\sigma_{m} \\sim HN(0.5)\n\\]\n\\[\n\\mu_{t} \\sim N(0, 0.5)\n\\]\n\\[\n\\sigma_{t} \\sim HN(0.5)\n\\]\nAfter fitting our model to the data and using a NUTS sampler w/ 500 warmup and 5000 samples, we achieve the below results.\n\n\n\n                     mean       std    median      5.0%     95.0%     n_eff     r_hat\n  class_beta[0]      0.03      0.04      0.03     -0.03      0.10   1825.25      1.00\n  class_beta[1]      0.05      0.04      0.04     -0.01      0.10    688.67      1.00\n  class_beta[2]      0.04      0.03      0.03     -0.01      0.07    752.82      1.00\n  class_beta[3]      0.03      0.02      0.03     -0.01      0.07   1153.19      1.00\n  class_beta[4]      0.03      0.03      0.03     -0.02      0.07   1733.09      1.00\n  class_beta[5]      0.02      0.03      0.02     -0.03      0.07   1545.40      1.00\n  class_beta[6]      0.02      0.03      0.02     -0.03      0.08   1703.07      1.00\n  class_beta[7]      0.02      0.03      0.02     -0.03      0.07   1596.52      1.00\n   class_int[0]      0.03      0.02      0.03     -0.00      0.07    517.34      1.00\n   class_int[1]      0.02      0.02      0.02     -0.01      0.05   1396.59      1.00\n   class_int[2]      0.01      0.02      0.01     -0.02      0.04   2576.21      1.00\n   class_int[3]      0.01      0.02      0.01     -0.02      0.04   2259.81      1.00\n   class_int[4]      0.01      0.02      0.01     -0.02      0.04   2348.81      1.00\n   class_int[5]      0.01      0.02      0.01     -0.02      0.04   2704.20      1.00\n   class_int[6]      0.01      0.02      0.01     -0.02      0.04   2207.97      1.00\n   class_int[7]      0.01      0.02      0.01     -0.02      0.04   1860.08      1.00\ncollege_beta[0]      0.02      0.01      0.02      0.01      0.03    711.33      1.00\ncollege_beta[1]      0.01      0.01      0.01     -0.01      0.03   1322.16      1.00\ncollege_beta[2]      0.00      0.01      0.00     -0.02      0.02    647.16      1.00\ncollege_beta[3]      0.01      0.02      0.01     -0.02      0.03   1262.88      1.00\ncollege_beta[4]      0.00      0.02      0.01     -0.03      0.04   1269.12      1.00\ncollege_beta[5]      0.00      0.03      0.01     -0.04      0.04   1430.99      1.00\ncollege_beta[6]      0.00      0.03      0.01     -0.04      0.05   1733.26      1.00\ncollege_beta[7]      0.00      0.03      0.01     -0.04      0.04   1146.67      1.00\ncollege_beta[8]      0.01      0.03      0.01     -0.03      0.05   2263.37      1.00\ncollege_beta[9]      0.01      0.03      0.01     -0.04      0.04   2195.16      1.00\n       mu_class      0.03      0.02      0.03     -0.01      0.07    844.81      1.00\n     mu_college      0.01      0.01      0.01     -0.02      0.03    915.74      1.00\n         mu_int      0.01      0.01      0.01     -0.00      0.03   1558.78      1.00\n          sigma      0.96      0.01      0.96      0.95      0.98   3696.71      1.00\n    sigma_class      0.03      0.02      0.02      0.00      0.06    456.18      1.00\n  sigma_college      0.02      0.02      0.01      0.00      0.04    407.22      1.00\n      sigma_int      0.01      0.01      0.01      0.00      0.03    348.40      1.00\n\nNumber of divergences: 131\n\n\nOur output for each beta appears to indicate that we have acheived stationarity and good mixing. To verify this visually, we can look at Figure 4.11.\n\n\n\n\n\nFigure 4.11: 2x4 grid of trace plots for each class size\n\n\n\n\nThe betas for each class size level appear to be well mixed and stationary. To verify the betas for each college, we can look at Figure 4.12.\n\n\n\n\n\nFigure 4.12: 2x4 grid of trace plots for each college\n\n\n\n\nJust as with Figure 4.11, we can see that each college appears to have reached appropriate stationarity and mixing. Now that we have verified that our sampler functioned well, we can begin investigating the posterior distributions. Figure 4.13 shows the posterior distributions of each class size and Figure 4.14 shows the posterior distributions for each college.\n\n\n\n\n\nFigure 4.13: Posterior distributions of each class size beta\n\n\n\n\n\n\n\n\n\nFigure 4.14: Posterior distributions of each college beta\n\n\n\n\nIt is interesting to note that in both Figure 4.13 and Figure 4.14, we see that most of the distributions are relatively centered around the point. The distinguishing feature for each distribution is the respective spread.\nJust as we performed for our first hierarchical model, we can perform predictions by generating a posterior predictive distribution (see Equation 4.1). We will first explore the predictions with this model for MATH 308 and compare it to our predictions from our first hierarchical model. The results are shown below.\n\n\nMean of pred_lm: 0.0403\n95% PI of pred_lm: (-0.0108, 0.0907)\nTrue value of pct_enroll_yoy: 0.0507\nPredicted Number of Students: 932\n95% PI of Number of Students: (886, 977)\nTrue Number of Students: 967\n\n\nThe very notable change in our prediction from our hierarchical linear model is that our PI range has shrunk significantly. Instead of the upper limit being close to .8, our upper limit of our 95% PI is approximately .09. That is a significant improvement! Our new hierarchical model also still contains the true value of percent change in percent share of enrollment. As we can see from above, our 95% PI for the predicted number of students is significantly better than before and would be of much better use practically for forecasting. We can perform this exercise again with predictions for MATH 140. Below are our results.\n\n\nMean of pred_lm: 0.0354\n95% PI of pred_lm: (-0.0483, 0.1073)\nTrue value of pct_enroll_yoy: 0.1796\nPredicted Number of Students: 3751\n95% PI of Number of Students: (3448, 4012)\nTrue Number of Students: 4392\n\n\nWe once again see a shrunken PI interval for this class. However, because the true percent change in percent enrollment was a large anomaly, our newly shrunken 95% PI does not capture our true percent change in percent share of enrollment. Nonetheless, the 95% PI can still be of practical use as it is not too far off from the true number of predicted students."
  },
  {
    "objectID": "posts/stat_692_proj/hotel_analysis_final.html",
    "href": "posts/stat_692_proj/hotel_analysis_final.html",
    "title": "An Analysis of TA-MU Hotel Booking Data",
    "section": "",
    "text": "TA-MU Hotels is a small, privately owned hotel business. Currently, TA-MU Hotels owns two hotels: One in the heart of Manhattan, NYC and another in Cancun, Mexico. TA-MU Hotels is looking to grow its business and hired us (TheBayesianBandit LLC) to look into how their respective hotels are performing. Specifically, our goal is to generate more profit for TA-MU Hotels by identifying profitable opportunities from their hotel booking data."
  },
  {
    "objectID": "posts/stat_692_proj/hotel_analysis_final.html#revenue-generation",
    "href": "posts/stat_692_proj/hotel_analysis_final.html#revenue-generation",
    "title": "An Analysis of TA-MU Hotel Booking Data",
    "section": "Revenue Generation",
    "text": "Revenue Generation\nAs noted in the introduction, TA-MU Hotels currently has two operating hotels. Figure 3.1 shows the current revenue generation by TA-MU Hotels on a daily level. The top panel indicates the total revenue of both hotels while the bottom panel shows the amount of revenue generated by each hotel.\n\n\n\n\n\nFigure 3.1: Time series plot of daily revenue generation of TA-MU Hotels. Top panel shows combined revenue whereas bottom panel shows revenue split by hotel location.\n\n\n\n\nFigure 3.1 shows a general trend of increasing revenue for the company. There also appears to be indications of seasonality in the total company revenue as revenue slows during the winter months and rises again in the spring and summer. Viewing the revenue splits by hotel types, generally the city hotel generates more revenue throughout the year. The resort hotel appears to have large spikes in revenue during the holiday season (December-January). In general, revenue for TA-MU Hotels appears to be gradually increasing over time.\nWhile the city hotel generally brings in the most revenue per day, Figure 3.2 shows that the resort hotel during peak times has more money generated per guest. There appears to be a recurring trend of high spending guests between the months of July-September at the resort hotel.\n\n\n\n\n\nFigure 3.2: Time series plot of average revenue per guest on a daily scale.\n\n\n\n\nWhile Figure 3.1 and Figure 3.2 show the daily revenue generation, we were also curious to see if the amount of money spent by guests differed by their respective length of stay. Figure 3.3 breaks down the average amount of money spent per night by the length of stay for each booking.\n\n\n\n\n\nFigure 3.3: Box plot of average amount of revenue spent per night stay.\n\n\n\n\nFrom Figure 3.3, we see that there is no major difference between the average amount of money spent per night by the length of stay. Customers who only stay one night spend about the same on average per night as those who stay three nights. This result is again seen in Figure 3.4 when we take at each hotel’s average customer expenditure per night.\n\n\n\n\n\nFigure 3.4: Box plot of average amount of revenue spent per night stay by each hotel."
  },
  {
    "objectID": "posts/stat_692_proj/hotel_analysis_final.html#client-demographics",
    "href": "posts/stat_692_proj/hotel_analysis_final.html#client-demographics",
    "title": "An Analysis of TA-MU Hotel Booking Data",
    "section": "Client Demographics",
    "text": "Client Demographics\nIdentifying who are our clients generating revenue for our business is the first step in understanding how we strategize to generate more revenue. Figure 3.5 shows the daily average number of people per booking at each hotel.\n\n\n\n\n\nFigure 3.5: Time series plot of average number of people per booking, split by hotel type.\n\n\n\n\nIt appears that on average, the lines for both hotels hover mostly in the two people per booking area. There are a few highs and lows indicating that the average at times could be close to one guest per booking or three guests per booking. Table 3.1 goes into more detail by looking into specific demographic details and the percent of bookings each demographic represents.\n\n\nTable 3.1: Client Demographics\n\n\n\n\n\n\n\n\n\nHotel\nNumber of Adults\nKids in Booking\nCustomer Type\n% Bookings\n\n\n\n\nCity Hotel\n2\nNo\nTransient\n33%\n\n\nResort Hotel\n2\nNo\nTransient\n18%\n\n\nCity Hotel\n2\nNo\nTransient-Party\n10%\n\n\nCity Hotel\n1\nNo\nTransient\n9%\n\n\nResort Hotel\n2\nNo\nTransient-Party\n4%\n\n\n\n\nTable 3.1 shows the top five demographics based on percent of bookings. From the table, we see that our biggest client demographic is two adults of customer type transient (when the booking is not part of a group or contract and is not associated with another transient booking) and no kids in the booking. Both the city hotel and resort hotel have this demographic as their most popular client demographic, with over 50% of total company bookings from this demographic alone. Additionally, in 3rd and 5th place respectively are two adult parties as well but of transient party (booked with a connection to at least one other transient booking)."
  },
  {
    "objectID": "posts/stat_692_proj/hotel_analysis_final.html#lost-revenue",
    "href": "posts/stat_692_proj/hotel_analysis_final.html#lost-revenue",
    "title": "An Analysis of TA-MU Hotel Booking Data",
    "section": "Lost Revenue",
    "text": "Lost Revenue\nImportant Note: For the column “is_canceled”, it is a binary classification for canceled = 1 and not canceled = 0.\nNow that we have identified TA-MU Hotels’ current revenue generation trends and their primary clients, we will identify areas of improvement based on lost revenue. Lost revenue primarily comes from canceled bookings. We see in Figure 3.6 that the city hotel, while generating the most bookings overall, also has a larger proportion of canceled bookings than the resort hotel.\n\n\n\n\n\nFigure 3.6: Bar plot of number of not-canceled/canceled bookings broken up by hotel type.\n\n\n\n\nIn order to quantify the impact of these cancelations, Figure 3.7 shows the daily gain of non-canceled bookings vs the daily loss of canceled bookings for each hotel.\n\n\n\n\n\nFigure 3.7: Top panel shows time series plot of daily revenue gained vs daily revenue lost based on non-canceled/canceled bookings in city hotel. Bottom panel shows time series plot of daily revenue gained vs daily revenue lost based on non-canceled/canceled bookings in resort hotel.\n\n\n\n\nAs we can see in Figure 3.7, the city hotel has quite a few times where lost revenue overtakes revenue gained. Several times we see large spikes in canceled bookings and subsequently large spikes in lost revenue. In contrast, it appears the resort hotel rarely has any days where lost revenue overtakes revenue gained. To further dive into the details of all this lost revenue, we can view Table 3.2 to see how many cancelations occur from our top five client demographics.\n\n\nTable 3.2: Client Demographics w/ Cancelations\n\n\n\n\n\n\n\n\n\n\nHotel\nNumber of Adults\nKids in Booking\nCustomer Type\n% Bookings\n% Bookings Canceled\n\n\n\n\nCity Hotel\n2\nNo\nTransient\n33%\n48%\n\n\nResort Hotel\n2\nNo\nTransient\n18%\n33%\n\n\nCity Hotel\n2\nNo\nTransient-Party\n10%\n32%\n\n\nCity Hotel\n1\nNo\nTransient\n9%\n42%\n\n\nResort Hotel\n2\nNo\nTransient-Party\n4%\n22%\n\n\n\n\nTable 3.2 reveals a troubling finding for our top five client demographics. Our number one demographic currently has canceled about 48% of bookings! Our number two demographic, of the same type but at the resort hotel, also boasts a very high 33% canceled bookings. Identifying the reasons behind these cancelations are paramount in helping TA-MU Hotels increase their profitability."
  },
  {
    "objectID": "posts/stat_692_proj/hotel_analysis_final.html#canceled-bookings-detail",
    "href": "posts/stat_692_proj/hotel_analysis_final.html#canceled-bookings-detail",
    "title": "An Analysis of TA-MU Hotel Booking Data",
    "section": "Canceled Bookings Detail",
    "text": "Canceled Bookings Detail\nTo further investigate the reasons behind these cancelations for our top demographics, we first investigate the relationship between lead time (time from when booking first entered system to arrival date) and cancelations. Figure 3.8 shows the average lead time between non-canceled bookings and canceled bookings (split by hotel type).\n\n\n\n\n\nFigure 3.8: Bar plot of average lead time split by hotel type and booking status\n\n\n\n\nFrom Figure 3.8, we see that there is a large discrepancy between average lead time between non-canceled and canceled bookings. Particulary, in the city hotel, the canceled bookings nearly have double the lead time on average compared to non-canceled bookings. To further dive into the details of the relationship between canceled bookings and lead time, Figure 3.9 shows the average lead time broken down by how the booking was created (through what marketing channel) split by hotel type and booking status.\n\n\n\n\n\nFigure 3.9: Bar plot of average lead time split by hotel type, distribution channel, and booking status.\n\n\n\n\nThe barplots marked with 0s are bookings that were non-canceled and the barplots with 1s are bookings that were canceled (ie (City Hotel, 0) is average lead time for bookings that were not canceled). As we can see there are still large discrepancies between not canceled and canceled bookings, especially for the city hotel. The TA/TO distribution channel appears to generate the largest lead times for canceled bookings in both the city hotel and the resort hotel."
  },
  {
    "objectID": "posts/stat_692_proj/hotel_analysis_final.html#target-market",
    "href": "posts/stat_692_proj/hotel_analysis_final.html#target-market",
    "title": "An Analysis of TA-MU Hotel Booking Data",
    "section": "Target Market",
    "text": "Target Market\nAs noted in Table 3.2 and Table 3.1, over 50% of TA-MU bookings are generated by a single demographic: two adults, transient, no kids. To help TA-MU Hotels become more profitable, we propose that we priortize this demographic for the remainder of the report with the goal of minimizing the effects of canceled bookings and maximizing profits from this primary demographic.\nTo confirm our findings from the canceled bookings detail section, we run the same analyses performed in that section but just on our focused demographic. Figure 4.1 shows the average lead time split by hotel type for non-canceled and canceled bookings, focused on our primary demographic.\n\n\n\n\n\nFigure 4.1: Bar plot of average lead time split by hotel type and booking status.\n\n\n\n\nAs we can see in Figure 4.1, we confirm that the discrepancies between lead time of non-canceled and canceled bookings exist for our primary demographic. To get a further detailed view of where our primary demographic cancels their bookings, we plot in Figure 4.2 the percent of canceled bookings split by distribution channel and hotel type.\n\n\n\n\n\nFigure 4.2: Bar plot of % bookings canceled split by hotel type and marketin distribution channel.\n\n\n\n\nIt appears that for our primary demographic (two adults, transient, no kids in booking), the highest percentage of cancellations for the city hotel are bookings made through the TA/TO channel. For the resort hotel, the highest percentage of cancellations are bookings made through the corporate channel."
  },
  {
    "objectID": "posts/stat_692_proj/hotel_analysis_final.html#data-setup",
    "href": "posts/stat_692_proj/hotel_analysis_final.html#data-setup",
    "title": "An Analysis of TA-MU Hotel Booking Data",
    "section": "Data Setup",
    "text": "Data Setup\nWe begin the process of creating a good predictive model by ensuring that the data we feed the model is accurate and useful. To do this, we dropped irrelevant columns to our analysis and filter it to include only data pertaining to our primary demographic. Additionally, we create dummy variable columns in order to account for factors in our model (i.e. distribution channel). The result of our data cleaning and feature engineering is a change from raw data of 119390 rows of data and 37 columns to training data of 61024 rows and 24 columns of data.\nTo help our model more accurately predict cancelations, we use a standard scaler to standardize each column of data. This will help the model recognize each feature as a normally distributed variable. Furthermore, to help determine the predictive capability of our model, we use a train-test split of 75% training and 25% test data. This allocation is randomly done by the train_test_split function provided in scikit-learn."
  },
  {
    "objectID": "posts/stat_692_proj/hotel_analysis_final.html#model-selection",
    "href": "posts/stat_692_proj/hotel_analysis_final.html#model-selection",
    "title": "An Analysis of TA-MU Hotel Booking Data",
    "section": "Model Selection",
    "text": "Model Selection\nIn order to determine whether or not we should use the full dataset of 24 features for our model or if a subset of these features would be adequate, we perform forward stepwise selection using a logistic regression model. The results of our model selection procedure are found below.\n\n\nIndex(['lead_time', 'stays_in_weekend_nights', 'previous_cancellations',\n       'previous_bookings_not_canceled', 'booking_changes',\n       'required_car_parking_spaces', 'distribution_channel_TA/TO',\n       'reserved_room_type_E', 'deposit_type_Non Refund',\n       'deposit_type_Refundable', 'hotel_Resort Hotel'],\n      dtype='object')\n\n\nThese 11 features, according to forward stepwise selection, are the features that provide the greatest additional improvement to the model. To test this theory, we compared a logistic regression model with these 11 features against a logistic regression model with all 24 features. The results show that the models performed equally as well at predictive accuracy (both around 75%). We determine that using less features is more computationally efficient for similar predictive accuracy so we will use the 11 features that we found with the forward stepwise selection for the remainder of the iterative process of building a predictive model.\n\nAdditional Features\nAs noted previously in the report, there could be interactions between some of these features. For example, the effect that lead time has on the probability of a cancelation might change based on the kind of distribution channel the lead came from. Therefore, we will add two extra features to current subset of 11 features for our predictive model: interaction between distribution channel and lead time, and interaction between distribution channel and hotel type."
  },
  {
    "objectID": "posts/stat_692_proj/hotel_analysis_final.html#model-comparisons",
    "href": "posts/stat_692_proj/hotel_analysis_final.html#model-comparisons",
    "title": "An Analysis of TA-MU Hotel Booking Data",
    "section": "Model Comparisons",
    "text": "Model Comparisons\n\nLogistic Regression\nWe begin with logistic regression to see if this kind of model performs well at predicting cancelations. After fitting our training data to our logistic regression model, we obtainthe following results.\n\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nis_canceled\nNo. Observations:\n45768\n\n\nModel:\nGLM\nDf Residuals:\n45754\n\n\nModel Family:\nBinomial\nDf Model:\n13\n\n\nLink Function:\nLogit\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-21165.\n\n\nDate:\nThu, 25 Apr 2024\nDeviance:\n42330.\n\n\nTime:\n13:11:47\nPearson chi2:\n3.81e+07\n\n\nNo. Iterations:\n28\nPseudo R-squ. (CS):\n0.3573\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nconst\n2.5268\n3333.240\n0.001\n0.999\n-6530.503\n6535.557\n\n\nx1\n0.5459\n0.016\n33.679\n0.000\n0.514\n0.578\n\n\nx2\n-0.0389\n0.012\n-3.250\n0.001\n-0.062\n-0.015\n\n\nx3\n1.9948\n0.127\n15.751\n0.000\n1.747\n2.243\n\n\nx4\n-0.6542\n0.061\n-10.808\n0.000\n-0.773\n-0.536\n\n\nx5\n-0.1151\n0.013\n-8.943\n0.000\n-0.140\n-0.090\n\n\nx6\n-7.3338\n6598.810\n-0.001\n0.999\n-1.29e+04\n1.29e+04\n\n\nx7\n0.2570\n0.016\n16.150\n0.000\n0.226\n0.288\n\n\nx8\n0.0512\n0.012\n4.387\n0.000\n0.028\n0.074\n\n\nx9\n11.0061\n6281.574\n0.002\n0.999\n-1.23e+04\n1.23e+04\n\n\nx10\n0.4591\n6533.082\n7.03e-05\n1.000\n-1.28e+04\n1.28e+04\n\n\nx11\n-0.0209\n0.013\n-1.658\n0.097\n-0.046\n0.004\n\n\nx12\n0.0620\n0.019\n3.326\n0.001\n0.025\n0.099\n\n\nx13\n-0.0320\n0.013\n-2.467\n0.014\n-0.057\n-0.007\n\n\n\n\n\nFeatures x1, x3, x7, x8, and x12 (lead time, previous cancellations, distribution channel TA/TO, reserved room type E, interaction between lead time and distribution channel TA/TO) show an increase in the log-odds of a cancelation and appear to be statistically significant (alpha = 0.05). Conversely, x2, x4, x5, and x13 (stays in weekend nights, previous bookings not canceled, booking changes, and interaction between distribution channel TA/TO and hotel type) show a decrease in the log-odds of a cancelation.\nUsing this fitted logistic regression model, we can generate predictions and see how the model does at predicting cancelations using our test data. One metric to test the predictive capability of a classification type model is using a ROC curve and computing the AUC score from it. Figure 5.1 shows the corresponding ROC curve and AUC score.\n\n\n\n\n\nFigure 5.1: ROC curve for logistic regression model.\n\n\n\n\nThe ROC curve in Figure 5.1 shows that the model achieves an AUC score of about .82, indicating that the model does a pretty good job at distinguishing between a canceled booking and a non-canceled booking. Using this graph, we can extract the optimal threshold that minimizes our false positive rate while still achieveing a max true positive rate. Using this threshold, we can construct a confusion matrix to gain further inference on how the model performs on discovering cancelations. Figure 5.2 shows the resulting confusion matrix.\n\n\n\n\n\nFigure 5.2: Confusion matrix for logistic regression model.\n\n\n\n\nFrom the confusion matrix, we see that the logistic regression model does a very good job at identifying non-canceled bookings, but does not perform as well at identifying canceled bookings. However, while the performance does drop significantly between canceled and non-canceled booking classification, the majority of the time the model does predict the correct label for canceled bookings. To view more specific metrics from the confusion table, we can view Table 5.1.\n\n\nTable 5.1: Logistic Regression Metrics\n\n\nMetric Name\nScore\n\n\n\n\nAccuracy\n75%\n\n\nSensitivity\n55%\n\n\nSpecificity\n89%\n\n\nPPV\n80%\n\n\nNPV\n72%\n\n\n\n\nFrom Table 5.1, we see that our logistic regression model performed well in every category except sensitivity. Even then, the sensitivity score is an acceptable one since the majority of the time it correctly labels a cancelation.\n\n\nRandom Forest\nWe now compare a tree based method approach to logistic regression by using a random forest. As we performed above, we will fit a random forest with the same training data and gather predictive metrics (AUC score, confusion matrix metrics) by using the same test set as the logistic regression model. Figure 5.3 shows the ROC curve and corresponding AUC score for the random forest model.\n\n\n\n\n\nFigure 5.3: ROC curve and AUC score for random forest model.\n\n\n\n\nFrom Figure 5.3, we see that the random forest model yielded a worse AUC score than the logistic regression model. We will check the resulting confusion matrix metrics for further comparison. Figure 5.4 contains the confusion matrix and Table 5.2 shows the resulting metrics from the confusion matrix.\n\n\n\n\n\nFigure 5.4: Confusion matrix for random forest model.\n\n\n\n\n\n\nTable 5.2: Random Forest Model vs Logistic Regression Model\n\n\n\n\n(a) Random Forest Metrics\n\n\nMetric Name\nScore\n\n\n\n\nAccuracy\n75%\n\n\nSensitivity\n60%\n\n\nSpecificity\n86%\n\n\nPPV\n76%\n\n\nNPV\n74%\n\n\n\n\n\n\n(b) Logistic Regression Metrics\n\n\nMetric Name\nScore\n\n\n\n\nAccuracy\n75%\n\n\nSensitivity\n55%\n\n\nSpecificity\n89%\n\n\nPPV\n80%\n\n\nNPV\n72%\n\n\n\n\n\n\nFrom Table 5.2 (a) and comparing these values to Table 5.2 (b), the random forest model performed very similarily to the logistic regression model. The random forest model achieved a higher sensitivity score while dropping in the specificity score. Additionally, the random forest model dropped in PPV but gained in NPV.\n\n\nXGBoost\nSince the random forest model did not appear to beat out the performance of the logistic regression model, we will now perform a comparison between XGBoost classification and the logistic regression model. We will perform the same procedures as done with the logistic regression model and the random forest model. Figure 5.5 shows the resulting ROC curve and corresponding AUC score.\n\n\n\n\n\nFigure 5.5: ROC curve and AUC score for XGBoost model\n\n\n\n\nThe AUC score for the XGBoost model appears to be very similar to the random forest model, and consequently is much lower than the logistic regression model AUC. Figure 5.6 and Table 5.3 show the resulting confusion matrix and corresponding metrics.\n\n\n\n\n\nFigure 5.6: Confusion matrix for XGBoost model.\n\n\n\n\n\n\nTable 5.3: XGBoost vs Logistic Regression Model\n\n\n\n\n(a) XGBoost Metrics\n\n\nMetric Name\nScore\n\n\n\n\nAccuracy\n75%\n\n\nSensitivity\n50%\n\n\nSpecificity\n95%\n\n\nPPV\n88%\n\n\nNPV\n71%\n\n\n\n\n\n\n(b) Logistic Regression Metrics\n\n\nMetric Name\nScore\n\n\n\n\nAccuracy\n75%\n\n\nSensitivity\n55%\n\n\nSpecificity\n89%\n\n\nPPV\n80%\n\n\nNPV\n72%\n\n\n\n\n\n\nFrom Table 5.3, we see that XGBoost improves in specificity over the logistic regression model, but decreases at almost the same degree in sensitivity. There is also a large jump in PPV and a slight decline in NPV for XGBoost over logistic regression.\n\n\nBayesian Logistic Regression\nThus far we have attempted to compare the logistic regression model to more ensemble-esque methods. We now attempt to demonstrate a different approach to the logistic regression model by incorporating priors on each feature. That is, we will perform a bayesian logistic regression to compare to the normal logistic regression method.\nDue to our limited subject matter expertise in the hotel industry, we will use uninformative priors for each feature. We will assume that each feature is drawn from a normal distribution with mean = \\(\\mu\\) and standard deviation = \\(\\sigma\\). For each \\(\\mu\\), we will place a prior of a normal distribution with \\(\\mu\\) = 0 and \\(\\sigma\\) = 2. For each \\(\\sigma\\), we will place a prior of a inverse gamma distribution with \\(\\alpha\\) = 1 and \\(\\beta\\) = 1.\nFor our sampler, we will use a Hamiltonian Monte Carlo with Energy Conserving Sampling. This is chosen due to the size of our dataset and the lack of sufficient computational power to perform a more precise sampling with sampler such as the No-U Turn sampler. After fitting our bayesian logistic regression model, we obtain the following results in Figure 5.7.\n\n\n\n\n\nFigure 5.7: Posterior distributions for each feature.\n\n\n\n\nA benefit of performing a bayesian model is the viewable uncertainty around parameters of interest. In our case, we can see the distributions of each beta value from our model. For example, the change in log-odds on booking status by lead time is likely to be around .7, but can be anywhere between .65 and .75, according to our model. Additionally, our predictions can also have this kind of uncertainty around them. For example, below is information pertaining to a booking that ended up canceling.\n\n\nlead_time                         110.0\nstays_in_weekend_nights             0.0\nprevious_cancellations              0.0\nprevious_bookings_not_canceled      0.0\nbooking_changes                     0.0\nrequired_car_parking_spaces         0.0\ndistribution_channel_TA/TO          1.0\nreserved_room_type_E                0.0\ndeposit_type_Non Refund             0.0\ndeposit_type_Refundable             0.0\nhotel_Resort Hotel                  0.0\nName: 10000, dtype: float64\n\n\nWe see that there were 110 days between lead entered into system and arrival date, that they were staying in the city hotel (hotel_resort = 0) and that they booked throuh TA/TO. Using our bayesian model, we can view the uncertainty around this prediction, as shown in Figure 5.8.\n\n\n\n\n\nFigure 5.8: Posterior Predictive Distribution for the described canceled booking.\n\n\n\n\nFrom Figure 5.8, we see that the most likely value from the distribution is around .42 to .43. According to the distribution, the probability that somebody with this kind of booking information (from our primary demographic) cancels is around .41 to .44.\nWhile the world of bayesian modeling is fascinating and can be powerful, the goal remains the same of providing a model that could be of use to us in identifying where we need to double book rooms in order to maximize profit for TA-MU Hotels. Just like in the other sections, we will compare the AUC score and derived confusion matrix metrics. Figure 5.9 shows the ROC curve for our bayesian model.\n\n\n\n\n\nFigure 5.9: ROC curve and corresponding AUC score for bayesian logistic regression model.\n\n\n\n\nFrom Figure 5.9, we see that the AUC score is very similar to the original logistic regression model. Figure 5.10 shows the corresponding confusion matrix and Table 5.4 show the comparison between the bayesian logistic regression model and the regular logistic regression model.\n\n\n\n\n\nFigure 5.10: Confusion matrix for bayesian logistic regression model\n\n\n\n\n\n\nTable 5.4: Bayesian Logistic Regression Model vs Logistic Regression Model\n\n\n\n\n(a) Bayesian Logistic Regression Metrics\n\n\nMetric Name\nScore\n\n\n\n\nAccuracy\n75%\n\n\nSensitivity\n53%\n\n\nSpecificity\n92%\n\n\nPPV\n84%\n\n\nNPV\n72%\n\n\n\n\n\n\n(b) Logistic Regression Metrics\n\n\nMetric Name\nScore\n\n\n\n\nAccuracy\n75%\n\n\nSensitivity\n55%\n\n\nSpecificity\n89%\n\n\nPPV\n80%\n\n\nNPV\n72%\n\n\n\n\n\n\nFrom Table 5.4, we see that the two models are very similar. The bayesian model shows a slight increase in specificity and a small decrease in sensitivity. The bayesian model also shows an increase in PPV while keeping NPV the same as the regular logistic regression model."
  },
  {
    "objectID": "posts/stat_692_proj/hotel_analysis_final.html#model-decision",
    "href": "posts/stat_692_proj/hotel_analysis_final.html#model-decision",
    "title": "An Analysis of TA-MU Hotel Booking Data",
    "section": "Model Decision",
    "text": "Model Decision\nWhile all four models proved to be viable models worthy of use in our system, the two logistic regression models had higher AUC scores and were more balanced in the sensitivity-specificity trade-off. To decide which logistic regression model to use, we look at the confusion matrix metrics and AUC scores. Both models have similar confusion matrix metrics and AUC scores. However, the bayesian logistic regression model has a particular advantage over the regular logistic regression model due to its inherit ability at including uncertainty around parameter estimates and predictions. Therefore, we recommend that we continue with the bayesian logistic regression model as our initial cancelation predictive model.\nThe full model for our bayesian logistic regression model is shown in Equation 5.1\n\\[\n\\text{log}(\\frac{p(Y)}{1-p(Y)}) = \\beta_0 + \\beta_1x_1 ... + \\beta_{m}x_m\n\\]\n\\[\n\\text{Y}_1 ... \\text{Y}_n \\overset{\\text{i.i.d.}}{\\sim} \\text{Bernoulli}(p)\n\\]\n\\[\n\\beta \\sim N(\\mu, \\sigma)\n\\]\n\\[\n\\mu \\sim N(0, 2)\n\\]\n\\[\n\\sigma \\sim IG(1, 1)\n\\tag{5.1}\\]\nEquation 5.1 states that the log-odds of booking status (1 being cancelation and 0 being non-cancelation) is a linear function of \\(m\\) predictors (our 11 features and two interaction terms) weighted by \\(m+1\\) betas (13 for the features and one intercept beta). Our response variable \\(Y\\) is a collection of n number of i.i.d. Bernoulli random variables with probability \\(p\\). Our betas are assumed to be normally distributed with mean \\(\\mu\\) and standard deviation \\(\\sigma\\). All \\(\\mu\\) values have a normal prior distribution with mean = 0 and standard deviation = 2. All \\(\\sigma\\) values have an inverse gamma prior distribution with shape = 1 and scale = 1."
  },
  {
    "objectID": "posts/welcome/welcome_to_blog.html",
    "href": "posts/welcome/welcome_to_blog.html",
    "title": "Welcome to my blog!",
    "section": "",
    "text": "TL;DR\nThis blog focuses on the use of statistics, particularly bayesian statistics, in the application of business problems. In this post, we review the necessary math background in order to understand future blog posts. As well, we establish expectations for future blog posts and the order in which they are shared.\n\n\nWelcome To My Blog!\nWelcome to my blog! If you are reading this, I hope that means you are as excited about learning statistics as I am about teaching it (and continuing to learn it!). This blog, honestly, is mostly a tool for me to improve my own knowledge in statistics by learning how I would convey it to others. I plan on doing this from a data analysis perspective. Given a certain situation/set of data points, how do we construct the problems we want to solve and implement proper solutions. Particularly, I hope to demonstrate that Bayesian methods can be viable methods to solve problems in business, healthcare, etc. Anyways, I hope you find this blog interesting and useful in your data career. Whether you are just entering data or are an experienced data professional, this blog intends to be a resource in demonstrating good data analysis with sound applied mathematical theory.\n\n\nPrerequisites\nWhile I did mention above that this blog is intended to be useful for beginners and experts alike, I will admit that I will be covering some higher level math, such as:\n\n\nMultivariate Calculus\n\n\nProbability Theory\n\n\nLinear Algebra\n\n\nFor example, suppose we are studying a dataset with a variable that is modeled as an exponential random variable, we would use the below notation to show the probability density function (PDF)\n\\[\\begin{equation}\n\\int_{0}^{\\infty} \\lambda e^{\\lambda x} \\,dx\n\\end{equation}\\]\n\\[\\begin{equation}\nX \\sim Exponential(\\lambda)\n\\end{equation}\\]\nOr, the important Bayes Theorem found below.\n\\[\\begin{equation}\nP(A|B) = \\frac{P(B|A) P(A)}{P(B)}\n\\end{equation}\\]\nDon’t be discourage if the above formulas don’t make sense right now. In each post that these appear, I will breakdown what they mean and their applicability in solving our problem.\n\n\nExpectations\nThe hope of this blog is to present statistics in the form of a data analysis case. For example, let’s say you are a host on AirBnB and want to maximize the number of nights you rent out. How do you properly price your rental given certain parameters (size, geographic setting, etc). We would then present the data points and walk through an analysis of the data by doing the following.\n\n\nExploring the data (EDA) to get to know our dataset\n\n\nConstructing a mathematical framework that can fit our data\n\n\nFit our data to said framework\n\n\nGather inference from our model\n\n\nReview answers explained by our model\n\n\nExplain possible enhancements to our model for future analyses\n\n\nThis will be our attempted framework to blog posts. I hope that by tackling problems in this way, our analytical toolbox will grow and our ability to construct measurable problems from our data will improve. This is the ultimate goal of this blog. I really hope that people will recognize this blog as an opportunity to learn how to think analytically.\n\n\nLet’s do this\nI just want to reiterate that I am excited to learn how to be a better analyst with you by getting to know the math that drives our analytics. I am very passionate about how data can be used to properly drive decision-making in organizations and I hope that this blog motivates you to do the same."
  }
]